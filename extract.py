# -*- coding: utf-8 -*-
"""extract.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1anqqyJktvj1X2PtLsiXAgjPZShSlH4Aq
"""

pip install mistralai

"""# single image

"""

API_KEY='rrENEIP4CNCLjIyGyG9YGbgGXgMvcWPo'

from google.colab import drive
drive.mount('/content/drive')

def encode_image(path):
    with open(path, "rb") as img:
        return base64.b64encode(img.read()).decode("utf-8")

def extract_ocr_text(base64image):
    response = client.ocr.process(
        model="mistral-ocr-latest",
        document={
            "type": "image_url",
            "image_url": f"data:image/png;base64,{base64image}"
        }
    )
    return response.pages[0].markdown

import base64
from PIL import Image
import os
from mistralai import Mistral

API_KEY = 'rrENEIP4CNCLjIyGyG9YGbgGXgMvcWPo'
client = Mistral(api_key=API_KEY)

image_path = '/content/drive/MyDrive/UPS_datasets /ups_labels/L16_aug11.jpg'

original = Image.open(image_path)
width, height = original.size


upper_half = original.crop((0, 0, width, int(height * 0.6)))
upper_half_path = 'upper_half.png'
upper_half.save(upper_half_path)

lower_half = original.crop((0, int(height * 0.6), width, height))
lower_half_path = 'lower_half.png'
lower_half.save(lower_half_path)



upper_b64 = encode_image(upper_half_path)
lower_b64 = encode_image(lower_half_path)

upper_text = extract_ocr_text(upper_b64)
lower_text = extract_ocr_text(lower_b64)

combined_text = upper_text.strip() + "\n\n" + lower_text.strip()

# print("=== COMBINED OCR OUTPUT ===\n")
# print(combined_text)

import re

def clean_ocr_text(text):
    lines = text.splitlines()
    cleaned_lines = []

    for line in lines:
        line = line.strip()

        if not line:
            continue

        if line.startswith("![") and "](" in line:
            continue
        if set(line.replace('|', '').strip()) == {'-'}:
            continue

        if '|' in line:
            parts = [part.strip() for part in line.split('|') if part.strip()]
            line = ' '.join(parts)

        cleaned_lines.append(line)

    return '\n'.join(cleaned_lines)


cleaned_text = clean_ocr_text(combined_text)
# print("=== CLEANED OCR TEXT ===\n")
# print(cleaned_text)

os.remove(upper_half_path)
os.remove(lower_half_path)


normalized_text = re.sub(r"[*#]+", "", cleaned_text)

normalized_text = re.sub(r"(SHIP[\s_]*TO)[:\-]?", "SHIP TO", normalized_text, flags=re.IGNORECASE)

# print(normalized_text)

ship_to_match = re.search(
    r"SHIP TO\s*(.*?)(?:TRACKING|1Z|TILLING|COD|BILLING|REFERENCE|\Z)",
    normalized_text,
    re.IGNORECASE | re.DOTALL
)

if ship_to_match:
    ship_to_block = ship_to_match.group(1).strip()
    print("SHIP TO BLOCK:\n", ship_to_block)
else:
    print("SHIP TO BLOCK: Not found")


tracking_match = re.search(
    r"TRACKING\s*[:#]?\s*([A-Z0-9 ]{10,})",
    normalized_text,
    re.IGNORECASE
)

if tracking_match:
    tracking_number = tracking_match.group(1).strip()
    print("TRACKING NUMBER BLOCK:\n", tracking_number)
else:
    print("TRACKING NUMBER BLOCK: Not found")

lines = ship_to_block.splitlines()
cleaned_lines = [line.strip() for line in lines if line.strip()]
ship_to_block_cleaned = '\n'.join(cleaned_lines)
print("CLEANED SHIP TO BLOCK:\n", ship_to_block_cleaned)

import re

ship_to_lines = [line.strip() for line in ship_to_block_cleaned.strip().split('\n') if line.strip()]

name = ship_to_lines[0] if len(ship_to_lines) > 0 else ""
street = ship_to_lines[1] if len(ship_to_lines) > 1 else ""
city_state_zip_line = ship_to_lines[2] if len(ship_to_lines) > 2 else ""
possible_phone_line = ship_to_lines[3] if len(ship_to_lines) > 3 else ""

city = state = zip_code = phone = ""

# Try format: "CITY ST ZIP"
match_full = re.match(r"(.+?)\s+([A-Z]{2})\s+(\d{5})", city_state_zip_line)
if match_full:
    city, state, zip_code = match_full.groups()

# Else try: "CITY, ST"
elif re.match(r"(.+?),\s*([A-Z]{2})", city_state_zip_line):
    match = re.match(r"(.+?),\s*([A-Z]{2})", city_state_zip_line)
    city, state = match.groups()
    zip_code = None

# Detect phone number line
if len(re.sub(r"\D", "", possible_phone_line)) >= 10:
    phone = possible_phone_line.strip()
else:
    phone = None

# Output
print("NAME:", name)
print("STREET:", street)
print("CITY:", city)
print("STATE:", state)
print("ZIP CODE:", zip_code if zip_code else "None")
print("PHONE:", phone if phone else "None")
print("TRACKING ID:", tracking_number)

"""# batch

"""

API_KEY = 'rrENEIP4CNCLjIyGyG9YGbgGXgMvcWPo'
client = Mistral(api_key=API_KEY)

drive_folder = '/content/drive/MyDrive/labelss'

image_files = [os.path.join(drive_folder, f) for f in os.listdir(drive_folder)
               if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

import os
import base64
import re
from PIL import Image
from mistralai import Mistral

def encode_image(path):
    with open(path, "rb") as img:
        return base64.b64encode(img.read()).decode("utf-8")

def extract_ocr_text(base64image):
    response = client.ocr.process(
        model="mistral-ocr-latest",
        document={
            "type": "image_url",
            "image_url": f"data:image/png;base64,{base64image}"
        }
    )
    return response.pages[0].markdown

def clean_ocr_text(text):
    lines = text.splitlines()
    cleaned_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line.startswith("![") and "](" in line:
            continue
        if set(line.replace('|', '').strip()) == {'-'}:
            continue
        if '|' in line:
            parts = [part.strip() for part in line.split('|') if part.strip()]
            line = ' '.join(parts)
        cleaned_lines.append(line)

    return '\n'.join(cleaned_lines)

for image_path in image_files:
    original = Image.open(image_path)
    width, height = original.size

    upper_half = original.crop((0, 0, width, int(height * 0.6)))
    lower_half = original.crop((0, int(height * 0.6), width, height))

    upper_half_path = 'upper_half.png'
    lower_half_path = 'lower_half.png'
    upper_half.save(upper_half_path)
    lower_half.save(lower_half_path)

    upper_b64 = encode_image(upper_half_path)
    lower_b64 = encode_image(lower_half_path)

    upper_text = extract_ocr_text(upper_b64)
    lower_text = extract_ocr_text(lower_b64)

    combined_text = upper_text.strip() + "\n\n" + lower_text.strip()
    cleaned_text = clean_ocr_text(combined_text)

    os.remove(upper_half_path)
    os.remove(lower_half_path)

    normalized_text = re.sub(r"[*#]+", "", cleaned_text)
    normalized_text = re.sub(r"(SHIP[\s_]*TO)[:\-]?", "SHIP TO", normalized_text, flags=re.IGNORECASE)

    ship_to_match = re.search(
        r"SHIP TO\s*(.*?)(?:TRACKING|1Z|TILLING|COD|BILLING|REFERENCE|\Z)",
        normalized_text,
        re.IGNORECASE | re.DOTALL
    )

    if ship_to_match:
        ship_to_block = ship_to_match.group(1).strip()
        print(f"\nIMAGE: {os.path.basename(image_path)}")
        #print("SHIP TO BLOCK:\n", ship_to_block)
    else:
        print(f"\nIMAGE: {os.path.basename(image_path)}")
        print("SHIP TO BLOCK: Not found")
        continue

    tracking_match = re.search(
        r"TRACKING\s*[:#]?\s*([A-Z0-9 ]{10,})",
        normalized_text,
        re.IGNORECASE
    )

    if tracking_match:
        tracking_number = tracking_match.group(1).strip()
        #print("TRACKING NUMBER BLOCK:\n", tracking_number)
    else:
        print("TRACKING NUMBER BLOCK: Not found")
        tracking_number = "None"

    lines = ship_to_block.splitlines()
    cleaned_lines = [line.strip() for line in lines if line.strip()]
    ship_to_block_cleaned = '\n'.join(cleaned_lines)
    #print("CLEANED SHIP TO BLOCK:\n", ship_to_block_cleaned)

    ship_to_lines = [line.strip() for line in ship_to_block_cleaned.strip().split('\n') if line.strip()]

    name = ship_to_lines[0] if len(ship_to_lines) > 0 else ""
    street = ship_to_lines[1] if len(ship_to_lines) > 1 else ""
    city_state_zip_line = ship_to_lines[2] if len(ship_to_lines) > 2 else ""
    possible_phone_line = ship_to_lines[3] if len(ship_to_lines) > 3 else ""

    city = state = zip_code = phone = ""

    match_full = re.match(r"(.+?)\s+([A-Z]{2})\s+(\d{5})", city_state_zip_line)
    if match_full:
        city, state, zip_code = match_full.groups()
    elif re.match(r"(.+?),\s*([A-Z]{2})", city_state_zip_line):
        match = re.match(r"(.+?),\s*([A-Z]{2})", city_state_zip_line)
        city, state = match.groups()
        zip_code = None

    if len(re.sub(r"\D", "", possible_phone_line)) >= 10:
        phone = possible_phone_line.strip()
    else:
        phone = None

    print("NAME:", name)
    print("STREET:", street)
    print("CITY:", city)
    print("STATE:", state)
    print("ZIP CODE:", zip_code if zip_code else "None")
    print("PHONE:", phone if phone else "None")
    print("TRACKING ID:", tracking_number)

