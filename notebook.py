# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sxiXGK8qHh1VZUp4jqJHHBUOtZElmeUN
"""

pip install mistralai

API_KEY='rrENEIP4CNCLjIyGyG9YGbgGXgMvcWPo'

from google.colab import drive
drive.mount('/content/drive')

import re
import base64
from mistralai import Mistral


def encode_image(image_location):
    with open(image_location, 'rb') as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

def extract_details(ocr_text):
    # --- Normalize all markdown-style formatting and keyword variants ---
    normalized_text = re.sub(r"[*#]+", "", ocr_text)  # remove markdown asterisks and hashtags

    # Normalize variations of 'SHIP TO'
    normalized_text = re.sub(r"(SHIP[\s_]*TO)[:\-]?", "SHIP TO", normalized_text, flags=re.IGNORECASE)

    # --- Extract SHIP TO block ---
    ship_to_match = re.search(
        r"SHIP TO\s*(.*?)(?=\n(?:UPS|TRACKING|1Z|TILLING|COD|BILLING|REFERENCE|\Z))",
        normalized_text, re.IGNORECASE | re.DOTALL
    )
    ship_to_block = ship_to_match.group(1).strip() if ship_to_match else "Not found"

    # --- Extract individual lines from SHIP TO block ---
    ship_to_lines = [line.strip() for line in ship_to_block.splitlines() if line.strip()]
    name = ship_to_lines[0] if len(ship_to_lines) > 0 else "Not found"
    phone = ship_to_lines[1] if len(ship_to_lines) > 1 else "Not found"
    address_lines = ship_to_lines[2:] if len(ship_to_lines) > 2 else []
    address = ", ".join(address_lines)

    # --- Extract tracking number ---
    tracking_match = re.search(
        r"\b1Z[\s\dA-Z]{10,}\b",  # Match 1Z and at least ~16 alphanumeric characters
        normalized_text, re.IGNORECASE
    )
    tracking_number = (
        tracking_match.group(0).replace(" ", "").upper() if tracking_match else "Not found"
    )

    return name, phone, address, tracking_number

import os
API_KEY='rrENEIP4CNCLjIyGyG9YGbgGXgMvcWPo'

image_folder = '/content/drive/MyDrive/sample_imgs/'
image_files = [f for f in os.listdir(image_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

data = []

for image_file in image_files:
    image_path = os.path.join(image_folder, image_file)
    base64image = encode_image(image_path)

    ocr_response = client.ocr.process(
        model="mistral-ocr-latest",
        document={
            "type": "image_url",
            "image_url": f"data:image/jpg;base64,{base64image}"
        }
    )

    ocr_text = ocr_response.pages[0].markdown
    name, phone, address, tracking_number = extract_details(ocr_text)

    data.append({
        "Name": name,
        "Phone": phone,
        "Address": address,
        "Tracking Number": tracking_number
    })
    print(image_path)
    print("NAME:", name)
    print("PHONE:", phone)
    print("ADDRESS:", address)
    print("TRACKING NUMBER:", tracking_number)

